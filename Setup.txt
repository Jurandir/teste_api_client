npm install --save express
npm install --save express-handlebars
npm install --save expres-session
npm install --save connect-flash
npm install --save body-parser
npm install --save bootstrap
npm install --save jquery
npm install --save popper.js

yarn add axios --save

npm install --save express-session
npm install --save connect-flash

npx nodemon app.js

npm install --save  morgan
npm install --save  cookie-parser
npm install --save font-awesome


Template HTML simples - Hands-on: Handlebars
https://www.youtube.com/watch?v=-bJl1zBJbFU


Node.js #12 - Como instalar o Handlebars no Node e criar o layout padrão para o projeto
https://www.youtube.com/watch?v=kK98Qr03qNo



Modelos Bootstrap
http://bootstrapdesigntools.com/tools/bootstrap-menu-builder/
http://bootsnipp.com/tags
https://www.youtube.com/watch?v=HC6W8f3gcmc


Axios - Fazendo Requisições para APIRestful - Node.JS
https://www.youtube.com/watch?v=d7bKeG9hb-0


fetch('http://localhost:6000/api/v1.0/posts/1', {
    method: 'GET',
    headers: {
        'Authorization': 'Bearer ' + _token; // 
    }
})
.then(function(response) {
    console.log(response);
}).catch(function (response) {
    console.log(response);
});



const api = axios.create({
  baseURL: 'http://10.0.3.2:3000',
  // baseURL: 'http://localhost:3000',
  headers: {
    'Content-Type': 'application/json',
    Accept: 'application/json',
  },
})


config.headers.Authorization = `Bearer ${user.token}`

==============================
//index.js
var http = require('http'); 
const express = require('express') 
const app = express() 
var cookieParser = require('cookie-parser'); 
const bodyParser = require('body-parser');
 
app.use(bodyParser.urlencoded({ extended: true })); 
app.use(bodyParser.json());
app.use(cookieParser()); 
 
app.get('/', (req, res, next) => {
    res.json({message: "Tudo ok por aqui!"});
})
 
app.get('/clientes', (req, res, next) => { 
    console.log("Retornou todos clientes!");
    res.json([{id:1,nome:'luiz'}]);
}) 
 
var server = http.createServer(app); 
server.listen(3000);
console.log("Servidor escutando na porta 3000...")


================================================

npm i http express cookie-parser body-parser
npm i jsonwebtoken dotenv-safe

# .env.example, commit to repo
SECRET=

#.env, don't commit to repo
SECRET=mysecret


	
require("dotenv-safe").config();
var jwt = require('jsonwebtoken');

=================================================
JavaScript
//authentication
app.post('/login', (req, res, next) => {
    //esse teste abaixo deve ser feito no seu banco de dados
    if(req.body.user === 'luiz' && req.body.pwd === '123'){
      //auth ok
      const id = 1; //esse id viria do banco de dados
      var token = jwt.sign({ id }, process.env.SECRET, {
        expiresIn: 300 // expires in 5min
      });
      return res.json({ auth: true, token: token });
    }
    
    res.status(500).json({message: 'Login inválido!'});
})

==========================================================
app.post('/logout', function(req, res) {
    res.json({ auth: false, token: null });
})
===========================================================
function verifyJWT(req, res, next){
    var token = req.headers['x-access-token'];
    if (!token) return res.status(401).json({ auth: false, message: 'No token provided.' });
    
    jwt.verify(token, process.env.SECRET, function(err, decoded) {
      if (err) return res.status(500).json({ auth: false, message: 'Failed to authenticate token.' });
      
      // se tudo estiver ok, salva no request para uso posterior
      req.userId = decoded.id;
      next();
    });
}
=================================================================
app.get('/clientes', verifyJWT, (req, res, next) => { 
    console.log("Retornou todos clientes!");
    res.json([{id:1,nome:'luiz'}]);
})
=============================================================
// Logs das requisições
var morgan = require('morgan')
app.use(morgan('dev'))



===============================================
  // Aqui vamos verificar o header da requisição, os parametros e o corpo da requisição, procurando o token
  var token = req.body.token || req.query.token || req.headers['x-access-token']

===============================================

git clone https://github.com/nulldreams/autenticacao-api-jwt.git


app.use('/admin', function (req, res, next) { // GET 'http://www.example.com/admin/new'
  console.dir(req.originalUrl) // '/admin/new'
  console.dir(req.baseUrl) // '/admin'
  console.dir(req.path) // '/new'
  next()
})

===================================================================

res
  .status(201)
  .cookie('access_token', 'Bearer ' + token, {
    expires: new Date(Date.now() + 8 * 3600000) // cookie will be removed after 8 hours
  })
  .cookie('test', 'test')
  .redirect(301, '/admin')

===================================================================
https://pt.stackoverflow.com/questions/88431/como-setar-um-token-no-header



youtube :
node js - Como configurar sessões #39

variaveis globais
req.flash("variavel","valor")

======================================================================
app.locals persiste ao longo da aplicação toda durante toda sua vida, já o res.locals persiste apenas durante o ciclo de vida de um response.
======================================================================
Já para informações mais ligadas ao escopo da requisição como dados do usuário logado, preferências do usuário, caminho da requisição, entre outros, é mais indicado utilizar o res.locals. Veja um exemplo simples de um middleware que é executado antes dos controllers com o objetivo de validar um Json Web Token e disponibilizar as informações ao longo da resposta da requisição:

const express = require('express');
const path = require('path');
const app = express();
(...)
app.use(function (req, res, next) {
    const token = req.get('my_auth_token');
    var jwt = require('jsonwebtoken');
    jwt.verify(token, 'shhhhh', function(err, decoded) {
        if (err) {
            res.locals.authenticated = false;
            return next();
        }
        res.locals.authenticated = true;
        res.locals.user = decoded.user;
        next();
    });
});
(...)
// Mapeamento das rotas
(...)
============================================================================


var express = require(‘express’);
var bodyParser = require(‘body-parser’);
var fs = require(‘fs’);

var app = express();

app.use(bodyParser.urlencoded({ extended:true }));
app.use(bodyParser.json());

app.use(function(req, res, next){
 res.setHeader(“Access-Control-Allow-Origin”, “*”);
 res.setHeader(“Access-Control-Allow-Methods”, “GET, POST, PUT, DELETE”);
 res.setHeader(“Access-Control-Allow-Headers”, “content-type”);
 res.setHeader(“Content-Type”, “application/json”);
 res.setHeader(“Access-Control-Allow-Credentials”, true);
 next();
});






